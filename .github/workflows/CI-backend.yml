name: CI-Backend

on:
  push:
    branches:
      - main
      - 'release/*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: [6.0.x, 8.0.x]
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Set Directory
      run: cd iera-backend/Gateway

    - name: Restore dependencies
      run: | 
        cd iera-backend/Gateway
        dotnet restore

    - name: Build solution
      run: |
        cd iera-backend/Gateway
        dotnet build --no-restore --configuration Release

    - name: Run tests
      run: |
        cd iera-backend/Gateway
        dotnet test --no-build --verbosity normal --configuration Release

    - name: Publish services
      run: |
        cd iera-backend/Gateway
        dotnet publish -c Release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: published-services
        path: iera-backend/Gateway/publish/**/*

    - name: Set up Docker Compose
      run: docker-compose -v
  
    - name: Build the Docker images with docker compose
      run: docker-compose up -d

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN_RW }}
  
    - name: Tag and Push gateway
      run: |
        docker tag gateway:latest niceonion/ierasite:gateway-latest
        docker push niceonion/ierasite:gateway-latest
  
    - name: Tag and Push announcement
      run: |    
        docker tag announcements:latest niceonion/ierasite:announcements-latest
        docker push niceonion/ierasite:announcements-latest
      
    - name: Tag and Push users
      run: |    
        docker tag users:latest niceonion/ierasite:users-latest
        docker push niceonion/ierasite:users-latest

  deploy:
    runs-on: ubuntu-latest
    needs: build    

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Start minikube
        uses: medyagh/setup-minikube@master
        
      - name: Deploy to Kubernetes
        run: |
            kubectl apply -f Kubernetes/Deployments/announcements-deployment.yaml
            kubectl apply -f Kubernetes/Deployments/users-deployment.yaml
            kubectl apply -f Kubernetes/Services/Announcements.yaml
            kubectl apply -f Kubernetes/Services/users.yaml
            kubectl apply -f Kubernetes/Ingress.yaml
            kubectl apply -f Kubernetes/HPA/hpa-announcements.yaml
            kubectl apply -f Kubernetes/HPA/hpa-users.yaml

      - name: Wait for pods to be ready
        run: |
            kubectl wait --for=condition=Ready pod -l app=announcements --timeout=300s
            kubectl wait --for=condition=Ready pod -l app=users --timeout=300s

      - name: Fetch detailed logs and status
        run: |
            kubectl get pods
            kubectl describe service announcements-service
            kubectl describe pod -l app=announcements
            kubectl logs -l app=announcements
            kubectl get deployments
            kubectl describe deployment announcements
            kubectl describe node minikube

      - name: Test service URLs
        run: |
            minikube service list 
            minikube service announcements-service --url
            echo "------------------opening the service------------------"
            curl $(minikube service announcements-service --url)
            
  loadtest:
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install k6
      run: |
        sudo apt-get update
        sudo apt-get install -y gnupg software-properties-common
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 33F40BC6
        echo "deb https://dl.bintray.com/loadimpact/deb stable main" | sudo tee -a /etc/apt/sources.list
        sudo apt-get update
        sudo apt-get install -y k6

    - name: Run load test
      run: |
        ANNOUNCEMENTS_URL=$(minikube service announcements-service --url)
        USERS_URL=$(minikube service users-service --url)
        echo "import http from 'k6/http';" > loadtest.js
        echo "import { check, sleep } from 'k6';" >> loadtest.js
        echo "export let options = { vus: 50, duration: '30s' };" >> loadtest.js
        echo "export default function () {" >> loadtest.js
        echo "  let res1 = http.get('$ANNOUNCEMENTS_URL');" >> loadtest.js
        echo "  check(res1, { 'status was 200': (r) => r.status == 200 });" >> loadtest.js
        echo "  let res2 = http.get('$USERS_URL');" >> loadtest.js
        echo "  check(res2, { 'status was 200': (r) => r.status == 200 });" >> loadtest.js
        echo "  sleep(1);" >> loadtest.js
        echo "}" >> loadtest.js
        k6 run loadtest.js
