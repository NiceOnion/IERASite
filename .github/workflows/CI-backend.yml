name: CI-Backend

on:
  push:
    branches:
      - main
      - 'release/*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: [6.0.x, 8.0.x]
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore iera-backend/Gateway

    - name: Build solution
      run: dotnet build iera-backend/Gateway --no-restore --configuration Release

    - name: Set up Google Cloud credentials
      run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" > $HOME/gcloud.json

    - name: Export GOOGLE_APPLICATION_CREDENTIALS
      run: echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud.json" >> $GITHUB_ENV

    - name: Run tests
      run: dotnet test iera-backend/Gateway --no-build --verbosity normal --configuration Release
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

    - name: Publish services
      run: dotnet publish iera-backend/Gateway -c Release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: published-services
        path: iera-backend/Gateway/publish/**/*

    - name: Set up Docker Compose
      run: docker-compose -v
  
    - name: Build the Docker images with docker compose
      run: docker-compose up -d

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN_RW }}
  
    - name: Tag and Push gateway
      run: |
        docker tag gateway:latest niceonion/ierasite:gateway-latest
        docker push niceonion/ierasite:gateway-latest
  
    - name: Tag and Push announcement
      run: |    
        docker tag announcements:latest niceonion/ierasite:announcements-latest
        docker push niceonion/ierasite:announcements-latest
      
    - name: Tag and Push users
      run: |    
        docker tag users:latest niceonion/ierasite:users-latest
        docker push niceonion/ierasite:users-latest

  deploy:
    runs-on: ubuntu-latest
    needs: build    

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Google Cloud credentials
        run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" > $HOME/gcloud.json
      
      - name: Export GOOGLE_APPLICATION_CREDENTIALS
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud.json" >> $GITHUB_ENV

      - name: Deploy to Kubernetes
        run: |
            kubectl apply -f Kubernetes/Deployments/announcements-deployment.yaml
            kubectl apply -f Kubernetes/Deployments/users-deployment.yaml
            kubectl apply -f Kubernetes/Deployments/ocelot-deployment.yaml
            kubectl apply -f Kubernetes/Services/Announcements.yaml
            kubectl apply -f Kubernetes/Services/users.yaml
            kubectl apply -f Kubernetes/Services/gateway.yaml
            kubectl apply -f Kubernetes/Ingress.yaml
            kubectl apply -f Kubernetes/HPA/hpa-announcements.yaml
            kubectl apply -f Kubernetes/HPA/hpa-users.yaml

  loadtest:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install k6
      run: |
        sudo apt-get update
        sudo apt-get install -y gnupg software-properties-common
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 33F40BC6
        echo "deb https://dl.bintray.com/loadimpact/deb stable main" | sudo tee -a /etc/apt/sources.list
        sudo apt-get update
        sudo apt-get install -y k6

    - name: Run load test
      run: |
        export ANNOUNCEMENTS_URL=$(minikube service announcements-service --url)
        export USERS_URL=$(minikube service users-service --url)
        k6 run -e ANNOUNCEMENTS_URL -e USERS_URL loadtest.js
